(self.webpackChunk=self.webpackChunk||[]).push([[524],{44:(e,t,s)=>{const a=s(377),{lightningChart:r,PalettedFill:n,LUT:o,emptyFill:i,emptyLine:l,AxisScrollStrategies:c,synchronizeAxisIntervals:d,regularColorSteps:u,Themes:g,LegendPosition:h}=a,{createSpectrumDataGenerator:m}=s(613),p=1024,x=r({resourcesBaseUrl:new URL(document.head.baseURI).origin+new URL(document.head.baseURI).pathname+"resources/"}).Dashboard({theme:g[new URLSearchParams(window.location.search).get("theme")||"darkGold"]||void 0,numberOfColumns:2,numberOfRows:2}).setColumnWidth(0,1).setColumnWidth(1,.2).setRowHeight(0,1).setRowHeight(1,.3),S=x.createChartXY({columnIndex:0,rowIndex:0,legend:{position:h.TopCenter}}).setTitle("2D Spectrogram with X & Y projection on mouse hover"),f=x.getTheme(),A=S.addHeatmapGridSeries({columns:p,rows:1024}).setPointerEvents(!1).setWireframeStyle(l).setFillStyle(new n({lookUpProperty:"value",lut:new o({interpolate:!0,steps:u(0,1,f.examples.spectrogramColorPalette)})})),y=x.createChartXY({columnIndex:1,rowIndex:0,legend:{visible:!1}}).setTitleFillStyle(i).setPadding({top:110}).setUserInteractions(void 0);y.getDefaultAxisY().setScrollStrategy(void 0),d(S.getDefaultAxisY(),y.getDefaultAxisY()),y.getDefaultAxisX().setScrollStrategy(c.expansion).setInterval({start:0,end:1,stopAxisAfter:!1});const w=y.addLineSeries({}).setName("Projection (Y)"),v=x.createChartXY({columnIndex:0,rowIndex:1,legend:{visible:!1}}).setTitleFillStyle(i).setUserInteractions(void 0);v.getDefaultAxisX().setScrollStrategy(void 0),d(S.getDefaultAxisX(),v.getDefaultAxisX()),v.getDefaultAxisY().setScrollStrategy(c.expansion).setInterval({start:0,end:1,stopAxisAfter:!1});const D=v.addLineSeries({}).setName("Projection (X)");S.getDefaultAxisY().setThickness(50),v.getDefaultAxisY().setThickness(50),S.getDefaultAxisX().setThickness(25),y.getDefaultAxisX().setThickness(25),m().setNumberOfSamples(p).setSampleSize(1024).generate().toPromise().then(e=>{A.invalidateIntensityValues(e);const t=(t,s)=>{let a,r;try{a=e[Math.round(t)].map((e,t)=>({x:e,y:t}))}catch(e){}try{r=[];const t=Math.round(s);for(let s=0;s<p;s+=1)r[s]={x:s,y:e[s][t]}}catch(e){}w.clear(),a&&w.appendJSON(a),D.clear(),r&&D.appendJSON(r)};S.seriesBackground.addEventListener("pointermove",e=>{const s=S.translateCoordinate(e,S.coordsAxis);t(s.x,s.y)}),t(512,512)})},216:()=>{}},e=>{e.O(0,[502],()=>e(e.s=44)),e.O()}]);